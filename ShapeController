unit ShapeController;


interface
 uses contnrs,System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Layouts, FMX.Controls.Presentation, FMX.StdCtrls, FMX.Edit, Connection, ConnectedShape;



type

TRectController = class(TObject)
private
  fList : TObjectList;
  fConnectedShape : TConnectedShape;
  fConnection : TLine;
protected

    Function getConnectedShape(Index : integer) : TConnectedShape;
public

   Function Add : TConnectedShape;

   Function AddConnection(Start, Destination : TConnectedShape) : TLine;

   Constructor Create;
   destructor Destroy; Override;

   property Shape[Item : Integer] : TConnectedShape read getConnectedShape;

end;

implementation


Function TRectController.getConnectedShape(index : integer) : TConnectedShape;
begin
  result := TConnectedShape(fList.items[index]);
end;

 Constructor TRectController.Create;
 begin
   inherited create;
   fList := TObjectList.Create;
 end;

 destructor TRectController.Destroy;
 begin
   fList.Free;
 end;

Function TRectController.Add : TConnectedShape;
begin
  fConnectedShape := TConnectedShape.Create(nil);
  fList.Add(fConnectedShape);
  result := fConnectedShape;
end;

Function TRectController.AddConnection(Start, Destination : TConnectedShape) : TLine;
begin
  if assigned(Start) and assigned(Destination) then
  begin
    fConnection := TLine.create(Start,Start, Destination);
    fConnection.Parent := Start.Parent;
    fList.add(fConnection);
    result := fConnection;
  end;
end;


end.
